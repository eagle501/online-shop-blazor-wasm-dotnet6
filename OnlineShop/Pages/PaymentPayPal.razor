@page "/payment"
@using OnlineShop.Models
@using OnlineShop.Models.Forms
@using OnlineShop.States
@using OnlineShop.Shared
@using OnlineShop.Utilities
@inject IJSRuntime JSRuntime
@inject CartState CartState
@inject NavigationManager NavigationManager

<div class="container">
  <div class="row">
    <div class="col-md-4 offset-md-4">
      <img src="Images/Banner/logo_Final.png" class="img-fluid" alt="Logo">
    </div>
  </div>
</div>
<hr/>
<div class="text-center mt-2">
    <p class="payment-light-change">You have @CartState.SelectedItems.Sum(p => p.LargeShrit + p.MediumShrit + p.SmallShrit) item(s) in your cart.</p>
    <p class="payment-light-change">Total Price: $@CartState.SelectedItems.Sum(p => p.Price * (p.LargeShrit + p.MediumShrit + p.SmallShrit))</p>
</div>
<hr />

<div class="container d-flex justify-content-center payment-light-title">
    <div class="col-md-6">
        <h4 class="mb-2">Payment Method</h4>
        <div id="smart-button-container">
            <input type="hidden" name="descriptionInput" id="description" @bind="@UserIdPayPal" />
            <input name="amountInput" type="hidden" id="amount" @bind="@PayTotal">
            <div style="text-align: center; margin-top: 0.625rem;" id="paypal-button-container"></div>
        </div>
    </div>
</div>

<div class="text-center payment-light-title">
    <button type="button" class="btn btn-success payment-light-title" onclick="history.go(-1)">Back To Cart</button>
</div>


@code {
    void NavigateToCheckout()
    {
        NavigationManager.NavigateTo("/checkout");
    }
}
    @code {
    private decimal TotalPrice => (decimal)CartState.SelectedItems.Sum(p => p.Price);

    private int SelectedItemsCount { get; set; }

  

    }

    
    @code {

        // Assuming SelectedItemsCount is declared and set properly in this component
        private int SelectedItemsCartCount { get; set; }

        private decimal BoundTotalPrice { get; set; }

     


    }



@code{


    [Parameter]
    public Product Product { get; set; } = new();
    public decimal TotalPayment {get; set;}

    public int UserIdPayPal { get; set; }
    private Random random = new Random();

  

[Inject]
		public IJSRuntime Js { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
		{
			try
			{
				if (firstRender)
				{
                    UserIdPayPal = random.Next(1, 10001);

					await Js.InvokeVoidAsync("initPayPalButton");
                    StateHasChanged();
				}
			}
			catch (Exception)
			{
				throw;
			}
		}

        
         
}



@code {
    private void NavigateToPaymentPage()
    {
        NavigationManager.NavigateTo("/PaymentPay");
    }
}






@code {
    [Parameter]
    public decimal Price { get; set; }
    private string localStoragePrice;

    private int PayQuantity { get; set; }
    private decimal PayTotal { get; set; }
    private string userId;

    protected async override void OnInitialized()
    {
        userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
        if (string.IsNullOrEmpty(userId))
        {
            userId = Guid.NewGuid().ToString();
            await JSRuntime.InvokeAsync<string>("localStorage.setItem", "userId", userId);
        }
        Price = decimal.Parse(new Uri(NavigationManager.Uri).Query.Split("=")[1]);
        PayQuantity = (int)CartState.SelectedItems.Sum(p => p.ItemQuantity);
        PayTotal = (decimal)@CartState.SelectedItems.Sum(p => p.Price * (p.LargeShrit + p.MediumShrit + p.SmallShrit));
        await JSRuntime.InvokeVoidAsync("localStorage.setItem","TotalPrice",PayTotal);
        if(PayTotal == 0)
        {
             NavigationManager.NavigateTo("/checkout");
        }
        
    }
}

@code{
    private string ProductDescription { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var cartItems = CartState.SelectedItems;
        var productDescriptions = cartItems.Select(item => item.Description).ToList();
        ProductDescription = string.Join(", ", productDescriptions);
    }
}
