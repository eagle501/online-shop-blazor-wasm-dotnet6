@page "/"
@using OnlineShop.States
@using OnlineShop.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject CartState CartState


<div class="container">
  <div class="row">
    <div class="col-md-4 offset-md-4">
      <img src="Images/Banner/logo_Final.png" class="img-fluid" alt="Logo">
    </div>
  </div>
</div>
<hr/>
<div class="d-flex justify-content-center">
  <h1 class="payment-dicription-title">Welcome to Our Online Store!</h1>
</div>
<br />

<div class="row">
  <div class="col-md-4">
    <div class="card">
      <img src="Images/polo17.png" style="height: 330px; width: 330px;" class="card-img-top img-standard" alt="Logo">
    </div>
  </div>
  <div class="col-md-4">
    <div class="card">
      <img src="Images/polo11.png" style="height: 330px; width: 330px;" class="card-img-top img-standard" alt="Logo">
    </div>
  </div>
  <div class="col-md-4">
    <div class="card">
      <img src="Images/polo18.png" style="height: 330px; width: 330px;" class="card-img-top img-standard" alt="Logo">
    </div>
  </div>
</div>
<br />
<div class="d-flex justify-content-center">
 <button class="btn btn-success payment-dicription-title" style="font-size: 16px;" type="button" @onclick="NavigateToProductPage">View Products</button>
</div>
<br />



<!--
        @foreach (var product in Products)
        {
    
                <ProductDisplay Product="product" 
                                DisplayBuyButton="true"
                                ItemCountFunction="@ItemCountFunction" />
            
        }
-->
<nav class="navbar sticky-bottom bg-body-tertiary">
  <div class="container-fluid">
    <a class="navbar-brand" href="#">Sticky bottom</a>
  </div>
</nav>

@code{
    [Parameter]
    public int ItemCountFunction { get; set;}
    [Parameter]
    public EventCallback<decimal> TotalPriceChanged { get; set; }
    public List<Product> Products { get; set; } = new();
    private void NavigateToProductPage()
    {
        NavigationManager.NavigateTo("/product-list");
    }
    protected override async Task OnInitializedAsync()
    {
        Products = await Http.GetFromJsonAsync<List<Product>>("sample-data/products.json") ?? new();
        await TotalPriceChanged.InvokeAsync(ItemCountFunction);
        StateHasChanged();
    }
}
