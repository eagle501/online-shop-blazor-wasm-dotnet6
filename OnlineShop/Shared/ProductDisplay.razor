@using OnlineShop.Models
@using OnlineShop.States
@inject CartState CartState
@inject IJSRuntime JSRuntime


<div class="d-flex justify-content-center align-items-center vh-75">
    <!-- Centering container -->
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-4 mb-5">
                <div class="card w-100">
                    <!-- Card content -->
                    <img src="@Product.ImageURL" class="card-img-top" alt="@Product.Name" />
                    <hr />
                    <blockquote class="card-text product-description-Bold" style="color:red;">$@Product.Price</blockquote>
                    <h5 class="card-title product-description-Bold">@Product.Name</h5>
                    <p class="card-text payment-dicription-title">@Product.Description</p>
                    <blockquote class="stock-notice">Only @Product.Quantity in Stock!</blockquote>
                    
                    @if (DisplayBuyButton)
                    {
                       <button class="btn btn-success product-description-Bold" style="font-size: 16px;" type="button" @onclick="UpdateItemCount">Add To Cart</button>
                    }
                </div>
            </div>
            <!-- Add more col-lg-4 divs here for additional cards -->
        </div>
    </div>
</div>



@code {
    [EditorRequired]
    [Parameter]
    public Product Product { get; set; } = new();

    [Parameter]
    public bool DisplayBuyButton { get; set; } = false;

    [Parameter]
    public bool DisplayRemoveButton { get; set; } = false;

    [Parameter]
    public int ItemCountFunction { get; set;}

    [Parameter]
    public EventCallback<decimal> TotalPriceChanged { get; set; }

    private async Task HandleButtonOnClick()
    {
        
        await JSRuntime.InvokeVoidAsync("alert", "Product added to cart!");
        StateHasChanged();
        await CartState.AddProductToCartAsync(Product.Id);
        await TotalPriceChanged.InvokeAsync(ItemCountFunction);
        
    }
    protected override async Task OnInitializedAsync()
        {
            var ItemCountFunction = CartState.SelectedItems.Count;
            StateHasChanged();
            await Task.Delay(1000);
        }

    @code {
        // ...
    
        private async void UpdateItemCount()
        {
            ItemCountFunction = CartState.SelectedItems.Count;
            await HandleButtonOnClick();
            await TotalPriceChanged.InvokeAsync(ItemCountFunction);
            StateHasChanged();
        }
    }
}

