@using OnlineShop.Models
@using OnlineShop.States
@using OnlineShop.Utilities
@inject CartState CartState
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject INotificationService NotificationService


<div class="d-flex justify-content-center align-items-center vh-75">
    <!-- Centering container -->
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-4 mb-5">
                <div class="card w-100">
                    <!-- Card content -->
                    <img src="@Product.ImageURL" class="card-img-top img-fluid" alt="@Product.Name" />
                    
                    <blockquote class="card-text product-description-Bold" style="color:red;">$@Product.Price</blockquote>
                    <h5 class="card-title product-description-Bold">@Product.Name</h5>
                    @if(!CartState.SelectedItems.Any(p => p.Id == Product.Id))
                    {
                        <p class="card-text payment-dicription-title">@Product.Description</p>
                        <blockquote class="stock-notice">Only @Product.Quantity in Stock!</blockquote>
                    }
                    
                    @if (CartState.SelectedItems.Any(p => p.Id == Product.Id))
                    {
                        <p class="stock-notice">Item Added To Cart.</p>

                        <a href="checkout" class="btn btn-success" style="font-family:con3; font-size: 20px;">
                        <i class="oi oi-cart"></i>&nbsp;<text class="payment-dicription-title" style="font-size: 18px;">View Cart</text>
                        <span class="badge bg-dark">Qty# @SelectedItemsCount1</span><span class="badge bg-dark"> $@TotalItemPriceDisplay</span>
                        </a>
                        <!--
                        <button class="btn btn-success product-description-Bold" style="font-size: 16px;" type="button" @onclick="NavigateToCheckoutPage">View Cart</button>
                        -->
                    }
                    @if (DisplayBuyButton && !CartState.SelectedItems.Any(p => p.Id == Product.Id))
                    {
                       <button class="btn btn-success product-description-Bold" style="font-size: 16px;" type="button" @onclick="UpdateItemCount">Add To Cart</button>
                    }
                </div>
            </div>
            <!-- Add more col-lg-4 divs here for additional cards -->
        </div>
    </div>
</div>



@code{
    [EditorRequired]
    [Parameter]
    public Product Product { get; set; } = new();

    [Parameter]
    public bool DisplayBuyButton { get; set; } = false;

    [Parameter]
    public bool DisplayRemoveButton { get; set; } = false;

    [Parameter]
    public int ItemCountFunction { get; set;}

    [Parameter]
    public EventCallback<decimal> TotalPriceChanged { get; set; }

    private async Task HandleButtonOnClick()
    {
        if (CartState.SelectedItems.Any(p => p.Id == Product.Id))
        {
            // Product is already in the cart
            await JSRuntime.InvokeVoidAsync("alert", $"{Product.Name} is already in cart! {CartState.SelectedItems.Count} Item(s) in Cart.", "Titllana-Bold");
        }
        else
        {
            if(CartState.SelectedItems.Count <= 1)
            {
                 await JSRuntime.InvokeVoidAsync("alert", $"{Product.Name} added to cart!", "Titllana-Bold","red");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"{Product.Name} added to cart! {CartState.SelectedItems.Count} Item(s) in Cart", "Titllana-Bold","red");
            }
           
            StateHasChanged();
            await CartState.AddProductToCartAsync(Product.Id);
            await TotalPriceChanged.InvokeAsync(ItemCountFunction);
        }
       
        
    }
    protected override async Task OnInitializedAsync()
        {
            var ItemCountFunction = CartState.SelectedItems.Count;
            await NotificationService.Subscribe<CartChangeEvent>(UpdateItemCount);
            SelectedItemsCount1 = CartState.SelectedItems.Count;
            await NotificationService.Subscribe<CartChangeEvent>(UpdateTotalItemPrice);
            TotalItemPriceDisplay = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "TotalItemPrice");
        
            StateHasChanged();
            await Task.Delay(1000);
        }

    
}

@code{
        
    
    private async Task UpdateItemCount()
    {
        ItemCountFunction = CartState.SelectedItems.Count;
        //await HandleButtonOnClick();
        PriceCalculater = (decimal)CartState.SelectedItems.Sum(p => p.Price);
        await PriceCalculaterChanged.InvokeAsync(PriceCalculater);
        StateHasChanged();
        await TotalPriceChanged.InvokeAsync(ItemCountFunction);
        await CartState.AddProductToCartAsync(Product.Id);
        StateHasChanged();
    }
}

@code{
    private int SelectedItemsCount1 { get; set; }
    private void NavigateToCheckoutPage()
    {
        NavigationManager.NavigateTo("/checkout");
    }
    private void UpdateItemCount(CartChangeEvent @event)
    {
        SelectedItemsCount1 = @event.Items.Count;
        StateHasChanged();
    }
}
@code{
    [Parameter]
    public EventCallback<decimal> PriceCalculaterChanged { get; set; }
    private decimal PriceCalculater { get; set; } = 0;


}
@code{
    private decimal TotalItemPrice { get; set; }
    private string TotalItemPriceDisplay { get; set; } = "";
/*
    private void UpdateTotalItemPrice(CartChangeEvent @event)
    {
        TotalItemPrice = (decimal)@event.Items.Sum(p => p.Price);
        StateHasChanged();
    }
*/
    private async Task UpdateTotalItemPriceAsync(CartChangeEvent @event)
    {
        TotalItemPrice = (decimal)@event.Items.Sum(p => p.Price);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "TotalItemPrice", TotalItemPrice.ToString());
        //TotalItemPriceDisplay = (await JSRuntime.InvokeAsync<string>("localStorage.getItem", "TotalItemPrice")).ToString();
        StateHasChanged();
    }

    private void UpdateTotalItemPrice(CartChangeEvent @event)
    {
        _ = UpdateTotalItemPriceAsync(@event);
    }

}

